package com.sample

import com.siit.sbnz.timdarmar.models.classes.Employer;
import com.siit.sbnz.timdarmar.models.classes.WorkExperience;

import com.siit.sbnz.timdarmar.models.events.EmployerWorkExperienceEvent;

import com.siit.sbnz.timdarmar.models.enums.EmployerCarelessnessType;
import com.siit.sbnz.timdarmar.models.enums.EmployerRecklessnessType;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.YearMonth;
import java.time.Instant;
import java.time.format.DateTimeFormatter;
import java.util.TimeZone;

declare CarelessEvent
	@role(event)
	employer: Employer
	reason: String
end

declare RecklessEvent
	@role(event)
	employer: Employer
	reason: String
end

declare PunishmentEvent
	@role(event)
	employer: Employer
	reason: String
end

declare PotentialBan
	@role(event)
	employer: Employer
	reason: String
end

declare CounterForAvgMark
	val: double
	inc: int
end

rule "Calculating avg rating from marked working experiences from employer"
	agenda-group "cep"
	when
		$ew: EmployerWorkExperienceEvent($e: employer, $we: WorkExperience,
		$we.dateTo != null, $we.employeeRating != null, $we.employerRating != null, 
		$we.paid == true)
		$counter: CounterForAvgMark()
		from accumulate
		(
			$ew2: EmployerWorkExperienceEvent 
			(
				this != $ew,
				$ew2.getEmployer().getId() == $e.getId(),
				$ew2.getWorkExperience().getId() != $we.getId(),
				$ew2.getWorkExperience().getDateTo() != null,
				$ew2.getWorkExperience().getEmployeeRating() != null,
				$ew2.getWorkExperience().getEmployerRating() != null,
				$ew2.getWorkExperience().getPaid() == true,
				this meets[24h] $ew
			),
			init
			(
				CounterForAvgMark c = new CounterForAvgMark();
				c.setVal(0.0);
				c.setInc(0);
			),
			action
			(
				c.setVal(c.getVal() + $ew2.getWorkExperience().getEmployerRating());
				c.setInc(c.getInc() + 1);
			),
			result
			(
				c
			)
		)
		not (PotentialBan(employer == $e, reason == "Low avg"))
		not (PotentialBan(employer == $e, reason == "not"))
	then
		double val = $counter.getVal() + $we.getEmployerRating();
		int inc = $counter.getInc() + 1;
		double avg = val/inc;
		String indikator;
		if (avg < 6.0)
			indikator = "Low avg";
		else
			indikator = "not";
		insert(new PotentialBan($e, indikator));
end

rule "Catching umarked working experiences from employer"
	agenda-group "cep"
	when
		$ew: EmployerWorkExperienceEvent($e: employer, $we: WorkExperience, 
		$we.dateTo != null, $we.employeeRating == null, $we.paid == true)
		$value: Number(intValue >= 2) 
		from accumulate 
		(
			$ew2: EmployerWorkExperienceEvent 
			(
				this != $ew,
				$ew2.getEmployer().getId() == $e.getId(),
				$ew2.getWorkExperience().getId() != $we.getId(),
				$ew2.getWorkExperience().getDateTo() != null,
				$ew2.getWorkExperience().getEmployeeRating() == null,
				$ew2.getWorkExperience().getPaid() == true,
				this meets[24h] $ew
			),
			count($ew2)
		)
		not (CarelessEvent(employer == $e, reason == "Little Careless")) 
		not (CarelessEvent(employer == $e, reason == "Careless"))
	then
		int value = $value.intValue() + 1;
		if (value >= 3 && value <= 5)
			insert(new CarelessEvent($e, "Little Careless"));
		else
			insert(new CarelessEvent($e, "Careless"));	
end

declare CounterForEvent
	littleReckless: int
	reckless: int
end

rule "Catching unpaid working experiences from employer"
	agenda-group "cep"
	when
		$ew: EmployerWorkExperienceEvent($e: employer, $we: WorkExperience,
		$we.dateTo != null, $we.paid == false)
		$counter: CounterForEvent() 
		from accumulate 
		(
			$ew2: EmployerWorkExperienceEvent 
			(
				this != $ew,
				$ew2.getEmployer().getId() == $e.getId(),
				$ew2.getWorkExperience().getId() != $we.getId(),
				$ew2.getWorkExperience().getDateTo() != null,
				$ew2.getWorkExperience().getPaid() == false,
				this meets[24h] $ew
			),
			init
			(
				CounterForEvent c = new CounterForEvent();
				c.setLittleReckless(0);
				c.setReckless(0);
			),
			action
			(
				LocalDateTime tempTime =
                LocalDateTime.ofInstant(Instant.ofEpochMilli
                ($ew2.getWorkExperience().getDateTo()),
                        TimeZone.getDefault().toZoneId());
                        
                if (YearMonth.now().atDay(1).minusDays(1).isBefore(tempTime.toLocalDate()) && 
                YearMonth.now().atDay(1).plusDays(5).isAfter(tempTime.toLocalDate()))
                	c.setLittleReckless(c.getLittleReckless() + 1);
                else if (YearMonth.now().atDay(1).plusDays(5).isEqual(tempTime.toLocalDate())
                 || YearMonth.now().atDay(1).plusDays(5).isBefore(tempTime.toLocalDate()))
                 c.setReckless(c.getReckless() + 1);
			),
			result
			(
				c
			)
		)
		not (RecklessEvent(employer == $e, reason == "Little Reckless"))
		not (RecklessEvent(employer == $e, reason == "Reckless"))
	then
		if ($counter.getLittleReckless() - $counter.getReckless() > 0)
			insert(new RecklessEvent($e, "Little Reckless"));
		else
			insert(new RecklessEvent($e, "Reckless"));	
end


rule "inserting PunishmentEvent one"
	agenda-group "cep"
	when
		CarelessEvent($e:employer, reason == "Little Careless")
		RecklessEvent($e1:employer, reason == "Little Reckless")
		eval($e.getId() == $e1.getId())
		not (PunishmentEvent(employer == $e, reason == "Punishment One"))
	then
		insert(new PunishmentEvent($e, "Punishment One"));		
end

rule "Catching a punishment event one"
	agenda-group "cep"
	when
		PunishmentEvent($e:employer, reason == "Punishment One", $reason: reason)
	then
		System.out.println("Id: " + $e.getId() + " reason: " + $reason);
		
		$e.setEmployerRecklessnessType(EmployerRecklessnessType.LITTLE_RECKLESS);
        $e.setEmployerCarelessnessType(EmployerCarelessnessType.LITTLE_CARELESS); 
      
		update($e);
end


rule "inserting PunishmentEvent two"
	agenda-group "cep"
	when
		CarelessEvent($e:employer, reason == "Little Careless")
		RecklessEvent($e1:employer, reason == "Reckless")
		eval($e.getId() == $e1.getId())
		not (PunishmentEvent(employer == $e, reason == "Punishment Two"))
	then		
		insert(new PunishmentEvent($e, "Punishment Two"));
end

rule "Catching a punishment event two"
	agenda-group "cep"
	when
		PunishmentEvent($e:employer, reason == "Punishment Two", $reason: reason)
	then
		System.out.println("Id: " + $e.getId() + " reason: " + $reason);
		
		$e.setEmployerRecklessnessType(EmployerRecklessnessType.RECKLESS);
        $e.setEmployerCarelessnessType(EmployerCarelessnessType.LITTLE_CARELESS); 
      
		update($e);
end


rule "inserting PunishmentEvent three"
	agenda-group "cep"
	when
		CarelessEvent($e:employer, reason == "Careless")
		RecklessEvent($e1:employer, reason == "Little Reckless")
		eval($e.getId() == $e1.getId())
		not (PunishmentEvent(employer == $e, reason == "Punishment Three"))
	then		
		insert(new PunishmentEvent($e, "Punishment Three"));
end

rule "Catching a punishment event three"
	agenda-group "cep"
	when
		PunishmentEvent($e:employer, reason == "Punishment Three", $reason: reason)
		not (PotentialBan(employer == $e, reason == "Punishment"))
	then
		System.out.println("Id: " + $e.getId() + " reason: " + $reason);
		
		$e.setEmployerRecklessnessType(EmployerRecklessnessType.LITTLE_RECKLESS);
        $e.setEmployerCarelessnessType(EmployerCarelessnessType.CARELESS); 
		update($e);
		
		insert(new PotentialBan($e, "Punishment"));
end


rule "inserting PunishmentEvent four"
	agenda-group "cep"
	when
		CarelessEvent($e:employer, reason == "Careless")
		RecklessEvent($e1:employer, reason == "Reckless")
		eval($e.getId() == $e1.getId())
		not (PunishmentEvent(employer == $e, reason == "Punishment Four"))
	then		
		insert(new PunishmentEvent($e, "Punishment Four"));
end

rule "Catching a punishment event four"
	agenda-group "cep"
	when
		PunishmentEvent($e:employer, reason == "Punishment Four", $reason: reason)
		not (PotentialBan(employer == $e, reason == "Punishment"))
	then
		System.out.println("Id: " + $e.getId() + " reason: " + $reason);
		
		$e.setEmployerRecklessnessType(EmployerRecklessnessType.RECKLESS);
        $e.setEmployerCarelessnessType(EmployerCarelessnessType.CARELESS);   
		update($e);
		
		insert(new PotentialBan($e, "Punishment"));
end


rule "Ban scenario"
	agenda-group "cep"
	when
		PotentialBan($e:employer, reason == "Punishment")
		PotentialBan($e1:employer, reason == "Low avg")
		eval($e.getId() == $e1.getId())
	then		
		System.out.println("Id: " + $e.getId() + " is banned");
		
		modify($e) { setPenalty(true); }
end
